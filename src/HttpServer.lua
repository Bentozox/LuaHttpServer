---
--- @module HttpServer
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by benjamin.
--- DateTime: 1/04/22 11:28
---

local httpServerM = require "http.server"
local headersM = require 'http.headers'
local Status = require 'Status'
local Request = require 'Request'


local self = {
    server = nil, -- Server
    routeRepository = require "RouteRepository", -- Route
    timeout = 10, -- Client timeout in seconds
}

-- Creating the http(s) server
-- @param string host Host of server (default: 0.0.0.0)
-- @param port Port of server (default: 0)
self.init = function(host, port)
    host = host or "0.0.0.0"
    port = port or 0

    self.server = httpServerM.listen{
        host = host,
        port = port,
        onstream = self.onRequest,
    }

    -- self.server.settimeout(self.timeout)
    print(("Create HttpServer on port %d"):format(port))
end

---Listening for http requests
self.listen = function()
    self.server:listen()
    self.server:loop()
end

-- Used to stop server
self.stop = function()
    print("HttpServer stop")
    self.server:close()
end


self.onRequest = function(sv, stream)
    local request = Request.new(stream)

    local path = request.getRequestHeader('path') or '/'

    if not self.routeRepository.tryRoute(path, request) then
        request.setResponseHeaders({
            status = Status.NOT_FOUND
        })
    else
        request.flush()
    end
end


---Adding route to http server request dispatcher
---@param path string Route path
---@param handler function handler called when request
self.route = function(path, handler)
    self.routeRepository.add(path, handler)
end


return {
    init = self.init,
    listen = self.listen,
    stop = self.stop,
    route = self.route
}
