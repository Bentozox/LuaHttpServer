---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by benjamin.
--- DateTime: 6/04/22 22:14
---

local ViewParser = {}


--- Start delimiter for a block.
local START_MULTILINE_DELIMITER = "@{"
--- End delimiter for a block.
local END_MULTILINE_DELIMITER = "}"
--TODO : Start delimiter for a single line.


--- Parer of template to HTML string
--- @param content string Template content to parse
--- @param data table Data to fill the template
function ViewParser:parse(content, data)
    content = content or ''

    local currentCode, startIndex, endIndex = extractContent(content, 1)
    while currentCode ~= nil and endIndex ~= nil do
        local generatedHtml = loadCode(currentCode, data)
        print("Generated HTML: ", generatedHtml)
        content = replaceContent(content, generatedHtml, startIndex, endIndex)
        currentCode, endIndex = extractContent(content, endIndex)
    end



    return content
end



-- Find first index of START_DELIMITER and next index of END_DELIMITER after START_DELIMITER and extract the content between them.
---@param content string
---@return {string, number, number} Extracted content and start index of START_DELIMITER and end index of END_DELIMITER
function extractContent(content, currentIndex)
    local startIndex = content:find(START_MULTILINE_DELIMITER, currentIndex)
    local endIndex = content:find(END_MULTILINE_DELIMITER, startIndex)

    if startIndex ~= nil and endIndex ~= nil then
        return content:sub(startIndex + #START_MULTILINE_DELIMITER, endIndex - 1), startIndex, endIndex
    end
end


-- Replace the content between START_DELIMITER and END_DELIMITER with the generated HTML.
---@param content string
---@param generatedHtml string
---@param startIndex number
---@param endIndex number
function replaceContent(content, generatedHtml, startIndex, endIndex)
    return content:sub(1, startIndex - 1) .. generatedHtml .. content:sub(endIndex + #END_MULTILINE_DELIMITER)
end

--- Load code extracted from template
--- @param code string Code to load
--- @param data table Data to fill the template
--- @return string HTML generated code
function loadCode(code, globalData)
    ---Template generated by loaded code
    ---@type string
    local generateHtml = ''

    -- Preparing view code environment for execution
    data = globalData

    --- Adding HTML to view
    ---@param value string HTML to add
    echo = function(value)
        generateHtml = generateHtml .. tostring(value)
        print("HELLO", value)
    end

    -- Execute code
    load(code)()

    return generateHtml
end

return ViewParser