---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by benjamin.
--- DateTime: 1/04/22 14:18
---

local headersM = require 'http.headers'
local HttpUtils = require 'http.util'


---@module Request
function Request(stream)
    local self = {} -- @module Request
    local requestHeaders = stream:get_headers() -- request headers
    local responseHeaders = headersM.new() -- response headers

    -- Get request headers
    ---@param headerKey string Key of header
    ---@return string Value of header
    self.getRequestHeader = function(headerKey)
        return requestHeaders:get(':' .. headerKey)
    end

    ---Set response headers
    ---@param headers table Table of headers
    ---@param endStream boolean End of stream
    self.setResponseHeaders = function(headers)
        for headerKey, headerValue in pairs(headers) do
            responseHeaders:delete(headerKey) -- delete old header if exists to authorize replace
            responseHeaders:append(headerKey, tostring(headerValue)) -- append header to response headers table
        end
    end

    ---Set response body
    --- TODO : Hide to handler
    ---@param body string Body of response
    self.write = function(body)
        stream:write_headers(responseHeaders, self.getRequestHeader('method') == 'HEAD') -- write response headers
        stream:write_chunk(body, true) -- write response body
    end

    self.flush = function()
        stream:write_headers(responseHeaders, self.getRequestHeader('method') == 'HEAD') -- write response headers
        stream:write_chunk("", true)
    end

    -- Plain path : with query string
    local plainSecuredPath = self.getRequestHeader('path') or '/'
    -- plainSecuredPath = securePath(plainSecuredPath)
    plainSecuredPath = HttpUtils.decodeURI(plainSecuredPath) -- decode URI to plain path

    ---Request path without query string
    ---@type string
    self.path = getPath(plainSecuredPath)

    ---Request query string (Data of GET request)
    ---@type table
    self.get = getGetData(plainSecuredPath)

    return self
end

--- Methode that secure path and return secure path
---@param path string Path to secure
---@return string Secure path





function securePath(path)

    -- Secure path to avoid path traversal attack (e.g. /../../etc/passwd)
    path = path:gsub('/[^/]*/%.%./', '/')

    return path
end


-- Function that return path without query string (e.g. /path?a=1&b=2 => /path)
function getPath(path)
    local path = path:match('^(.*)%?') or path
    return path
end


--- Method that extract get data from request path and return it as table of key/value pairs
---@return table
function getGetData(path)
    local getData = {}
    if path:find('?') then
        local getDataString = path:sub(path:find('?') + 1)
        for key, value in string.gmatch(getDataString, '([^&]+)=([^&]+)') do
            getData[key] = value
        end
    end
    return getData
end


return {
    new = Request
}